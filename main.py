import streamlit as st
from transformers import MarianMTModel, MarianTokenizer, Seq2SeqTrainer, Seq2SeqTrainingArguments, DataCollatorForSeq2Seq
from datasets import Dataset
import torch

# ---- 1. Define Idioms Dataset ---- #
idioms_data = [
    {"hi": "‡§∞‡§∏‡•ç‡§∏‡•Ä ‡§ú‡§≤ ‡§ó‡§Ø‡•Ä, ‡§¨‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§ó‡§Ø‡§æ", "en": "Even after one hits rock bottom, their arrogance remains unchanged."},
    {"hi": "‡§®‡§æ‡§ö ‡§®‡§æ ‡§ú‡§æ‡§®‡•á ‡§Ü‡§Å‡§ó‡§® ‡§ü‡•á‡§¢‡§º‡§æ", "en": "A bad workman blames his tools."},
    {"hi": "‡§®‡§æ ‡§®‡•å ‡§Æ‡§® ‡§§‡•á‡§≤ ‡§π‡•ã‡§ó‡§æ, ‡§®‡§æ ‡§∞‡§æ‡§ß‡§æ ‡§®‡§æ‡§ö‡•á‡§ó‡•Ä", "en": "If the task is never completed, celebration is meaningless."},
    {"hi": "‡§â‡§≤‡•ç‡§ü‡§æ ‡§ö‡•ã‡§∞ ‡§ï‡•ã‡§§‡§µ‡§æ‡§≤ ‡§ï‡•ã ‡§°‡§æ‡§Å‡§ü‡•á", "en": "The guilty blames the innocent."},
    {"hi": "‡§Ü ‡§¨‡•à‡§≤ ‡§Æ‡•Å‡§ù‡•á ‡§Æ‡§æ‡§∞", "en": "Inviting trouble unnecessarily."},
    {"hi": "‡§ò‡§∞ ‡§ï‡•Ä ‡§Æ‡•Å‡§∞‡•ç‡§ó‡•Ä ‡§¶‡§æ‡§≤ ‡§¨‡§∞‡§æ‡§¨‡§∞", "en": "Familiar things are often undervalued."},
    {"hi": "‡§è‡§ï ‡§Ö‡§®‡§æ‡§∞ ‡§∏‡•å ‡§¨‡•Ä‡§Æ‡§æ‡§∞", "en": "Too many people vying for one opportunity."},
    {"hi": "‡§¨‡§Ç‡§¶‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§ú‡§æ‡§®‡•á ‡§Ö‡§¶‡§∞‡§ï ‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§¶", "en": "Someone who doesn't appreciate something valuable."},
    {"hi": "‡§Ö‡§Ç‡§ß‡•á‡§∞ ‡§®‡§ó‡§∞‡•Ä ‡§ö‡•å‡§™‡§ü ‡§∞‡§æ‡§ú‡§æ", "en": "A place where there's no rule and the leader is incompetent."},
    {"hi": "‡§ß‡•Ä‡§∞‡•á-‡§ß‡•Ä‡§∞‡•á ‡§∞‡•á ‡§Æ‡§®‡§æ, ‡§ß‡•Ä‡§∞‡•á ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§π‡•ã‡§Ø", "en": "Patience is the key to achieving everything."},
    {"hi": "‡§ú‡§π‡§æ‡§Å ‡§ö‡§æ‡§π ‡§µ‡§π‡§æ‡§Å ‡§∞‡§æ‡§π", "en": "Where there‚Äôs a will, there‚Äôs a way."},
    {"hi": "‡§ì‡§ñ‡§≤‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡§ø‡§∞ ‡§¶‡§ø‡§Ø‡§æ, ‡§§‡•ã ‡§Æ‡•Ç‡§∏‡§≤ ‡§∏‡•á ‡§ï‡•ç‡§Ø‡§æ ‡§°‡§∞", "en": "If you've taken the risk, don't fear the consequences."},
    {"hi": "‡§Ö‡§™‡§®‡•á ‡§Æ‡•Å‡§Å‡§π ‡§Æ‡§ø‡§Ø‡§æ‡§Å ‡§Æ‡§ø‡§†‡•Ç", "en": "To brag about oneself."},
    {"hi": "‡§Ü‡§∏‡§Æ‡§æ‡§® ‡§∏‡•á ‡§ó‡§ø‡§∞‡§æ, ‡§ñ‡§ú‡•Ç‡§∞ ‡§Æ‡•á‡§Ç ‡§Ö‡§ü‡§ï‡§æ", "en": "Out of one problem, into another."},
    {"hi": "‡§¶‡§æ‡§≤ ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§ï‡§æ‡§≤‡§æ ‡§π‡•à", "en": "Something is fishy."},
    {"hi": "‡§ú‡§ø‡§∏‡§ï‡•Ä ‡§≤‡§æ‡§†‡•Ä ‡§â‡§∏‡§ï‡•Ä ‡§≠‡•à‡§Ç‡§∏", "en": "Might is right."},
    {"hi": "‡§ä‡§Å‡§ü ‡§ï‡•á ‡§Æ‡•Å‡§Å‡§π ‡§Æ‡•á‡§Ç ‡§ú‡•Ä‡§∞‡§æ", "en": "A drop in the ocean."},
    {"hi": "‡§ñ‡§ø‡§∏‡§ø‡§Ø‡§æ‡§®‡•Ä ‡§¨‡§ø‡§≤‡•ç‡§≤‡•Ä ‡§ñ‡§Ç‡§≠‡§æ ‡§®‡•ã‡§ö‡•á", "en": "A frustrated person lashes out irrationally."},
    {"hi": "‡§ú‡•ã ‡§ó‡§∞‡§ú‡§§‡•á ‡§π‡•à‡§Ç ‡§µ‡•ã ‡§¨‡§∞‡§∏‡§§‡•á ‡§®‡§π‡•Ä‡§Ç", "en": "Those who boast often don't deliver."},
    {"hi": "‡§∏‡§æ‡§Å‡§™ ‡§≠‡•Ä ‡§Æ‡§∞ ‡§ú‡§æ‡§è ‡§î‡§∞ ‡§≤‡§æ‡§†‡•Ä ‡§≠‡•Ä ‡§® ‡§ü‡•Ç‡§ü‡•á", "en": "A solution where both parties are satisfied."},
    {"hi": "‡§¨‡§ø‡§≤‡•ç‡§≤‡•Ä ‡§ï‡•á ‡§≠‡§æ‡§ó‡•ç‡§Ø ‡§∏‡•á ‡§õ‡•Ä‡§Ç‡§ï‡§æ ‡§ü‡•Ç‡§ü‡§æ", "en": "A rare stroke of luck."},
    {"hi": "‡§•‡•ã‡§•‡§æ ‡§ö‡§®‡§æ ‡§¨‡§æ‡§ú‡•á ‡§ò‡§®‡§æ", "en": "Empty vessels make the most noise."},
    {"hi": "‡§®‡§ø‡§Ç‡§¶‡§ï ‡§®‡§ø‡§Ø‡§∞‡•á ‡§∞‡§æ‡§ñ‡§ø‡§è", "en": "Keep your critics close, they help you improve."},
    {"hi": "‡§ï‡§∞‡•á‡§≤‡§æ ‡§ä‡§™‡§∞ ‡§∏‡•á ‡§®‡•Ä‡§Æ ‡§ö‡§¢‡§º‡§æ", "en": "Something already bad just got worse."},
    {"hi": "‡§Ö‡§Ç‡§ß‡•á ‡§ï‡•á ‡§π‡§æ‡§• ‡§¨‡§ü‡•á‡§∞ ‡§≤‡§ó‡§®‡§æ", "en": "A blind man finding a quail ‚Äì extreme luck."},
    {"hi": "‡§™‡§ó-‡§™‡§ó ‡§™‡§∞ ‡§¨‡§ø‡§ò‡•ç‡§® ‡§Ü‡§§‡•á ‡§π‡•à‡§Ç", "en": "Trouble at every step."},
    {"hi": "‡§¶‡•ã ‡§®‡§æ‡§µ‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§µ‡§æ‡§∞‡•Ä ‡§†‡•Ä‡§ï ‡§®‡§π‡•Ä‡§Ç", "en": "You can‚Äôt ride two boats at once."},
    {"hi": "‡§ú‡§ø‡§∏‡§ï‡§æ ‡§ï‡§æ‡§Æ ‡§â‡§∏‡•Ä ‡§ï‡•ã ‡§∏‡§æ‡§ú‡•á", "en": "Only the skilled should handle their task."},
    {"hi": "‡§ó‡§ß‡•á ‡§ï‡•ã ‡§ò‡•ã‡§°‡§º‡§æ ‡§∏‡§Æ‡§ù‡§®‡§æ", "en": "To overestimate someone unworthy."},
    {"hi": "‡§Æ‡•Å‡§Å‡§π ‡§Æ‡•á‡§Ç ‡§∞‡§æ‡§Æ, ‡§¨‡§ó‡§≤ ‡§Æ‡•á‡§Ç ‡§õ‡•Å‡§∞‡•Ä", "en": "To pretend goodness while planning harm."}
]

# ---- 2. Convert to Hugging Face Dataset ---- #
dataset = Dataset.from_list(idioms_data)

# ---- 3. Load Model and Tokenizer ---- #
model_name = 'Helsinki-NLP/opus-mt-hi-en'
tokenizer = MarianTokenizer.from_pretrained(model_name)
model = MarianMTModel.from_pretrained(model_name)

# ---- 4. Preprocessing ---- #
def preprocess(example):
    model_inputs = tokenizer(example["hi"], max_length=64, truncation=True, padding="max_length")
    labels = tokenizer(example["en"], max_length=64, truncation=True, padding="max_length")
    model_inputs["labels"] = labels["input_ids"]
    return model_inputs

tokenized = dataset.map(preprocess)

# ---- 5. Training ---- #
training_args = Seq2SeqTrainingArguments(
    output_dir="./results",
    per_device_train_batch_size=2,
    num_train_epochs=10,
    logging_steps=10,
    save_strategy="no",
    report_to="none"
)

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)

trainer = Seq2SeqTrainer(
    model=model,
    args=training_args,
    train_dataset=tokenized,
    tokenizer=tokenizer,
    data_collator=data_collator,
)

with st.spinner("Training model... (this may take time on first run)"):
    trainer.train()

# ---- 6. Define Translation Function ---- #
def translate(text):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True).input_ids
    output = model.generate(inputs, max_length=64)
    return tokenizer.decode(output[0], skip_special_tokens=True)

# ---- 7. Streamlit UI ---- #
st.set_page_config(page_title="Hindi Idioms Translator", layout="centered")
st.title("üìö Hindi Idioms Translator")
st.write("This app fine-tunes a MarianMT model to translate Hindi idioms to English.")

user_input = st.text_area("‚úçÔ∏è Enter a Hindi idiom:", height=100, placeholder="Example: ‡§∞‡§∏‡•ç‡§∏‡•Ä ‡§ú‡§≤ ‡§ó‡§Ø‡•Ä, ‡§¨‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§ó‡§Ø‡§æ")

if st.button("üîÑ Translate"):
    if user_input.strip():
        output = translate(user_input)
        st.success("‚úÖ Translation:")
        st.write(f"**{output}**")
    else:
        st.warning("‚ö†Ô∏è Please enter a valid Hindi idiom.")
